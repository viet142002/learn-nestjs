// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// MARK: USER
model User {
    id          Int         @id @default(autoincrement())
    email       String      @unique
    password    String
    role        Role        @default(USER)
    permissions Permisson[]
    profile     Profile?
    posts       Post[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

// MARK: PROFILE
model Profile {
    id       Int     @id @default(autoincrement())
    bio      String?
    fullname String?
    avatar   String?
    user     User    @relation(fields: [userId], references: [id])
    userId   Int     @unique
}

// MARK: PERMISSION
model Permisson {
    id        Int      @id @default(autoincrement())
    name      String
    value     String[] @default([])
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// MARK: PRODUCT
model Product {
    id        Int      @id @default(autoincrement())
    code      String
    price     Int
    sale      Int
    image     String[]
    post      Post?    @relation(fields: [postId], references: [id])
    postId    Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// MARK: POST
model Post {
    id          Int       @id @default(autoincrement())
    thumb       String
    title       String
    description String
    content     String
    style       Style
    status      Status
    author      User      @relation(fields: [authorId], references: [id])
    authorId    Int
    product     Product[]
    postId      Int?      @unique
    related     Post[]    @relation("RelatedPost")
    relatedPost Post?     @relation("RelatedPost", fields: [postId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

// enum
enum Style {
    BLOG
    NEWS
    PRODUCT
}

enum Role {
    USER
    ADMIN
    RETAILER
    STAFF
}

enum Status {
    PUBLISHED
    DRAFT
    ARCHIVED
    DELETED
    STOPPED
    SOLD_OUT
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    PAID
}
